from tkinter import *
import cv2
from PIL import Image, ImageTk
from tkinter import filedialog
import time
from googletrans import Translator


from StackGAN import StackGAN
import argparse
from utils import *

from shutil import copyfile

class App():
    def __init__(self):
        self.makeRoot()
        self.logoManage()
        self.buttonManage()
        self.textManage()
        
        pass

    def makeRoot(self):
        self.root = Tk()
        self.root.geometry("800x900+500+80")
        self.root.config(bg="#658DC6")
        self.root.title("Text to Image Software")

        pass

    def buttonManage(self):
        self.translateIcon = PhotoImage(file="imageSource/translate.png")
        self.translate = Button(self.root, text="Translate Text", bg= '#34558b', fg='white', command= self.translateClick, width = 100, height=50 )
        self.translate.config(image= self.translateIcon, compound = BOTTOM)
        self.translate.place(x= 640, y= 190)

        self.openIcon = PhotoImage(file="imageSource/openfile.png")
        self.openFile = Button(self.root, text="Open file", bg= '#34558b', fg='white', command= self.importFileFunc, width=100, height=50)
        self.openFile.config(image= self.openIcon, compound = BOTTOM)
        self.openFile.place(x=40,y=280)
        
        self.processIcon = PhotoImage(file="imageSource/play.png")
        self.process = Button(self.root, text="Process", bg= '#34558b', fg='white', command= self.processClick, width=100, height=50)
        self.process.config(image= self.processIcon, compound = BOTTOM)
        self.process.place(x= 240, y=280)
        
        self.saveIcon = PhotoImage(file="imageSource/save.png")
        self.saveImage = Button(self.root, text="Save Image", bg= '#34558b', fg='white', command= self.saveClick, width= 100, height= 50)
        self.saveImage.config(image=self.saveIcon, compound=BOTTOM)
        self.saveImage.place(x=440, y=280)
        
        self.clearIcon = PhotoImage(file="imageSource/delete.png")
        self.clearAll = Button(self.root, text="Clear All", bg= '#34558b', fg='white', command= self.clearAllClick, width= 100, height= 50)
        self.clearAll.config(image=self.clearIcon, compound=BOTTOM)
        self.clearAll.place(x=640,y=280)

        # LABEL 
        
        pass

    def textManage(self):
        v = StringVar(self.root, value="Nhập mô tả về con chim của bạn tại đây....")
        self.textInput = Entry(self.root, font= 20, textvariable=v, fg='#34558b')
        self.textInput.place(x=40, y=190, width=570, height=60)
        pass

    def canvasManage(self):
        try:
            self.chay()
        
            self.canvas = Canvas(self.root, width=720, height= 410, bg="#34558b")
            self.canvas.place(x=40, y=380)

            self.image_stage1 = Image.open("results/StackGAN_birds_gan_1adv_2kl/fake_64_1.jpg")
            self.image_stage1 = self.image_stage1.resize((180,180), Image.ANTIALIAS)
            self.img_s1 = ImageTk.PhotoImage(self.image_stage1)
            self.canvas.create_image(80,90,anchor=NW, image=self.img_s1)

            self.image_stage2 = Image.open("results/StackGAN_birds_gan_1adv_2kl/fake_1.jpg")
            self.image_stage2 = self.image_stage2.resize((320,320), Image.ANTIALIAS)
            self.img_s2 = ImageTk.PhotoImage(self.image_stage2)
            self.canvas.create_image(370,20,anchor=NW, image=self.img_s2)

            self.label_stage1 = Label(self.canvas, text="Image is generated by Stage 1")
            self.label_stage1.place(x=70,y=370)

            self.label_stage2 = Label(self.canvas, text="Image is generated by Stage 2")
            self.label_stage2.place(x=430,y=370)

        except:
            self.processNoti()

        pass

    def importFileFunc(self):
        a = []
        index= 0
        hsl1 = filedialog.askopenfile(mode='r')
        print(hsl1)
        if hsl1 is None:
            return
        else:
            chuoi = str(hsl1)
            
            for i in chuoi:
                if i == "'":
                    a.append(index)
                if(len(a)==2):
                    break
                index=index+1
            path = str(chuoi[a[0]+1:a[1]])
            print(path)
        copyfile(path, './dataset/birds/text/char-CNN-RNN-embeddings.pickle')
        print("Import file successfully!")
        self.importNoti()
        
        pass
    
    def removeFile(self):
        try:
            os.remove('./dataset/birds/text/char-CNN-RNN-embeddings.pickle') 
            print("Delete file successfully!")
        except:
            print("Not found file to delete!")

        pass

    def translateClick(self):
        self.string = self.textInput.get()
        self.texttranslated = self.translateFunc(self.string)

        self.textInput.delete(0,"end")
        self.textInput.insert(0,self.texttranslated)

        print("Translate text successfully!")

        pass


    def processClick(self):
        self.canvasManage()
        
        pass

    def saveClick(self):
        a = []
        index= 0
        hsl = filedialog.asksaveasfile(mode='w', defaultextension=".png")

        if hsl is None:
            return
        else:
            chuoi = str(hsl)
            
            for i in chuoi:
                if i == "'":
                    a.append(index)
                if(len(a)==2):
                    break
                index=index+1
            path = str(chuoi[a[0]+1:a[1]])
            
            self.image_stage2 = self.image_stage2.save(path)

        self.saveNoti()

        pass

    def clearAllClick(self):
        self.canvas.place_forget()

        self.textInput.delete(0,"end")
        self.textInput.insert(0,"Mô tả một con chim khác nữa tại đây.")

        self.removeFile()

        pass

    def importNoti(self):
        self.importNotice = Tk()
        self.importNotice.geometry("300x100+750+400")
        self.importNotice.title("Notification")
        self.importNotice.config(bg="#658DC6")
        self.importFileNoti = Label(self.importNotice, text="Import File Successfully", bg="#658DC6", fg="white")
        self.importFileNoti.pack(ipady= 10)

        quitImportNoti = Button(self.importNotice, text="Okay", bg="#34558b", fg="white", command=lambda: self.importNotice.destroy())
        quitImportNoti.pack()

        pass

    def saveNoti(self):
        self.saveNotice = Tk()
        self.saveNotice.geometry("300x100+750+400")
        self.saveNotice.title("Notification")
        self.saveNotice.config(bg="#658DC6")
        self.saveNoticeContent = Label(self.saveNotice, text= "The image saved successful", bg="#658DC6", fg="white")
        self.saveNoticeContent.pack(ipady=5)
        
        quitSaveNoti = Button(self.saveNotice, text="Okay", bg="#34558b", fg="white", command=lambda: self.saveNotice.destroy())
        quitSaveNoti.pack()

        pass

    def processNoti(self):
        self.processNotice = Tk()
        self.processNotice.geometry("300x100+750+400")
        self.processNotice.title("Notification")
        self.processNotice.config(bg="#658DC6")
        self.processNoticeContent = Label(self.processNotice, text= "Import text description to Process!", bg="#658DC6", fg="white")
        self.processNoticeContent.pack(ipady=5)
        
        quitProcessNoti = Button(self.processNotice, text="Okay", bg="#34558b", fg="white", command=lambda: self.processNotice.destroy())
        quitProcessNoti.pack()
        
        pass

    def translateFunc(self, inputtxt):
        trans = Translator()
        t = trans.translate(inputtxt, src = 'vi', dest = 'en')
        return t.text

        pass

    def logoManage(self):
        self.im1 = ImageTk.PhotoImage(Image.open("imageSource/logoslogan.png").resize((540,360), Image.ANTIALIAS))
        
        panel = Label(self.root, image = self.im1, bg="#658DC6")
        panel.pack(ipady=0)

        pass

    def chay(self):
        def parse_args():
            desc = "Tensorflow implementation of StackGAN"
            parser = argparse.ArgumentParser(description=desc)
            parser.add_argument('--phase', type=str, default='test', choices=('train', 'test'), help='phase name')
            parser.add_argument('--dataset', type=str, default='birds', help='dataset_name')

            parser.add_argument('--iteration', type=int, default=500000, help='The number of training iterations')
            parser.add_argument('--decay_flag', type=str2bool, default=True, help='The decay_flag')
            parser.add_argument('--decay_iter', type=int, default=100000, help='decay epoch')

            parser.add_argument('--batch_size', type=int, default=32, help='The size of batch size for each gpu')
            parser.add_argument('--print_freq', type=int, default=1000, help='The number of image_print_freq')
            parser.add_argument('--save_freq', type=int, default=10000, help='The number of ckpt_save_freq')

            parser.add_argument('--lr', type=float, default=0.0002, help='The learning rate')

            parser.add_argument('--gan_type', type=str, default='gan', help='[gan / lsgan / hinge]')

            parser.add_argument('--adv_weight', type=int, default=1, help='Weight about GAN')
            parser.add_argument('--kl_weight', type=int, default=2, help='Weight about kl_loss')

            parser.add_argument('--sn', type=str2bool, default=False, help='using spectral norm')

            parser.add_argument('--img_height', type=int, default=256, help='The height size of image')
            parser.add_argument('--img_width', type=int, default=256, help='The width size of image ')
            parser.add_argument('--img_ch', type=int, default=3, help='The size of image channel')
            parser.add_argument('--augment_flag', type=str2bool, default=True, help='Image augmentation use or not')

            parser.add_argument('--checkpoint_dir', type=str, default='checkpoint',
                                help='Directory name to save the checkpoints')
            parser.add_argument('--result_dir', type=str, default='results',
                                help='Directory name to save the generated images')
            parser.add_argument('--log_dir', type=str, default='logs',
                                help='Directory name to save training logs')
            parser.add_argument('--sample_dir', type=str, default='samples',
                                help='Directory name to save the samples on training')

            return check_args(parser.parse_args())

        """checking arguments"""
        def check_args(args):
            # --checkpoint_dir
            check_folder(args.checkpoint_dir)

            # --result_dir
            check_folder(args.result_dir)

            # --log_dir
            check_folder(args.log_dir)

            # --sample_dir
            check_folder(args.sample_dir)

            # --batch_size
            try:
                assert args.batch_size >= 1
            except:
                print('batch size must be larger than or equal to one')
            return args

        """main"""
        def main():
            # parse arguments
            args = parse_args()
            if args is None:
                exit()

            # open session
            with tf.Session(config=tf.ConfigProto(allow_soft_placement=True)) as sess:
                gan = StackGAN(sess, args)

                # build graph
                gan.build_model()

                # show network architecture
                show_all_variables()

                if args.phase == 'train' :
                    gan.train()
                    print(" [*] Training finished!")

                if args.phase == 'test' :
                    gan.test()
                    print(" [*] Test finished!")



        if __name__ == '__main__':
            main()

    def Run(self):
        self.root.mainloop()
        
        pass
App().Run()
